generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String        @id @default(uuid()) @map("id") @db.Uuid
  email        String?       @unique
  first_name   String?
  last_name    String?
  role         Role          @default(ADMIN)
  phoneNumber  String?
  address      String?
  isActive     Boolean       @default(true)
  subVillage   SubVillage?
  createdBy    String?       @db.Uuid
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now()) @updatedAt
  gender       Gender?
  Article      Article[]
  children     Child[]       @relation("ParentChildren")
  galleries    Gallery[]
  measurements Measurement[]
  recipes      Recipe[]
  creator      User?         @relation("UserCreator", fields: [createdBy], references: [id])
  createdUsers User[]        @relation("UserCreator")

  @@index([email])
  @@index([role])
  @@index([subVillage])
  @@map("profiles")
}

model Child {
  id           String        @id @default(cuid())
  gender       Gender
  dateOfBirth  DateTime
  parentId     String        @db.Uuid
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  first_name   String
  last_name    String
  parent       User          @relation("ParentChildren", fields: [parentId], references: [id])
  measurements Measurement[]

  @@index([parentId])
}

model Measurement {
  id                 String         @id @default(cuid())
  childId            String
  measurementDate    DateTime
  height             Float
  heightForAgeZScore Float
  stuntingStatus     StuntingStatus
  measuredById       String         @db.Uuid
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  child              Child          @relation(fields: [childId], references: [id], onDelete: Cascade)
  measuredBy         User           @relation(fields: [measuredById], references: [id])

  @@unique([childId, measurementDate])
  @@index([childId])
  @@index([measurementDate])
  @@index([stuntingStatus])
}

model Recipe {
  id           String       @id @default(cuid())
  name         String
  category     FoodCategory
  youtubeUrl   String?
  ingredients  String[]
  createdById  String       @db.Uuid
  isPublished  Boolean      @default(true)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  cookingSteps String[]
  createdBy    User         @relation(fields: [createdById], references: [id])

  @@index([category])
  @@index([id])
  @@index([createdById])
}

model Gallery {
  id          String   @id @default(cuid())
  title       String
  description String
  imageUrl    String
  createdById String   @db.Uuid
  isPublished Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User     @relation(fields: [createdById], references: [id])

  @@index([createdById])
}

model Article {
  id              String          @id
  title           String
  slug            String          @unique
  imageUrl        String
  category        ArticleCategory
  description     String
  content         String
  metaTitle       String?
  metaDescription String?
  isPublished     Boolean         @default(false)
  isDraft         Boolean         @default(true)
  isFeatured      Boolean         @default(false)
  viewCount       Int             @default(0)
  publishedAt     DateTime?
  createdById     String          @db.Uuid
  createdAt       DateTime        @default(now())
  updatedAt       DateTime
  User            User?           @relation(fields: [userId], references: [id])
  userId          String?         @db.Uuid

  @@index([category])
  @@index([createdById])
  @@index([isFeatured])
  @@index([isPublished])
  @@index([publishedAt])
  @@index([slug])
}

enum ArticleCategory {
  NUTRISI
  KESEHATAN
  PARENTING
  RESEP
  BERITA
  TIPS
}

enum FoodCategory {
  AGE_6_8
  AGE_9_11
  AGE_12_23
}

enum Gender {
  MALE
  FEMALE
}

enum Role {
  ADMIN
  CADRE
  PARENT
}

enum StuntingStatus {
  NORMAL
  STUNTING
  STUNTING_BERAT
}

enum SubVillage {
  GEMAWANG
  PENANGKAN
  DEPOK
  KLODRAN
  KALINONGKO
  TEGAL_PARAKAN
  DERMONGANTI
  MARGOSARI
}
